x <- rnorm(n = 20, mean = 10, sd = 1)
reg <- lm(y~x)
largestRes <- which.max(abs(resid(reg)))
revised_x <- x[-largestRes]
revised_y <- y[-largestRes]
revisedReg <- lm(revised_y~revised_x)
pVal <- summary(revisedReg)$coefficients[2,4]
if (pVal < 0.05) {
signifSum <- signifSum + 1
}
}
signifRate <- signifSum / simulations
signifRate
signifSum <- 0
for (i in 1 : simulations) {
y <- rnorm(n = 20, mean = 50, sd = 3)
x <- rnorm(n = 20, mean = 10, sd = 1)
reg <- lm(y~x)
largestRes <- which.max(abs(resid(reg)))
revised_x <- x[-largestRes]
revised_y <- y[-largestRes]
revisedReg <- lm(revised_y~revised_x)
pVal <- summary(revisedReg)$coefficients[2,4]
if (pVal < 0.1) {
signifSum <- signifSum + 1
}
}
signifRate <- signifSum / simulations
signifRate
signifSum <- 0
for (i in 1 : simulations) {
y <- rnorm(n = 20, mean = 50, sd = 3)
x <- rnorm(n = 20, mean = 10, sd = 1)
reg <- lm(y~x)
largestRes <- which.max(abs(resid(reg)))
revised_x <- x[-largestRes]
revised_y <- y[-largestRes]
revisedReg <- lm(revised_y~revised_x)
pVal <- summary(revisedReg)$coefficients[2,4]
if (pVal < 0.1) {
signifSum <- signifSum + 1
}
}
signifRate <- signifSum / simulations
signifRate
signifSum <- 0
simulations <- 1000
for (i in 1 : simulations) {
y <- rnorm(n = 20, mean = 50, sd = 3)
x <- rnorm(n = 20, mean = 10, sd = 1)
reg <- lm(y~x)
largestRes <- which.max(abs(resid(reg)))
revised_x <- x[-largestRes]
revised_y <- y[-largestRes]
revisedReg <- lm(revised_y~revised_x)
pVal <- summary(revisedReg)$coefficients[2,4]
if (pVal < 0.05) {
signifSum <- signifSum + 1
}
}
signifRate <- signifSum / simulations
signifRate
##Result is 0.096
simulations <- 1000
signifSum <- 0
par(mfrow = c(3, 3)) #set up a 3 * 3 grid.
for(i in 1 : simulations) {
y <- rnorm(n = 20, mean = 50, sd = 3)
x <- rnorm(n = 20, mean = 10, sd = 1)
reg <- lm(y~x)
pVal <- summary(reg)$coefficients[2,4]
if (pVal < 0.05) {
plot(x, y, pch = 16, col = "skyblue")
abline(reg, lty = 1, col = "skyblue4")
signifSum <- signifSum + 1
}
}
signifRate <- signifSum / simulations
signifRate
?AIC
lm(y~1)
nullReg <- lm(y~1)
abline(nullReg)
plot()
plot(x, y)
abline(nullReg)
nullReg
ACI(nullReg, reg)
AIC(nullReg, reg)
AIC[1, 2]
getACI <- ACI(nullReg, reg)
getACI <- AIC(nullReg, reg)
getACI
getACI[1,2]
simulations <- 1000
nullSum <- 0
for (i in 1 : 1000) {
y <- rnorm(n = 20, mean = 50, sd = 3)
x <- rnorm(n = 20, mean = 10, sd = 1)
nullModel <- lm(y~1)
reg <- lm(y~x)
getAIC <- AIC(nullModel, reg)
if (getAIC[1, 2] < getAIC[2, 2]) {
nullSum <- nullSum + 1
}
}
nullSum
simulations <- 1000
nullSum <- 0
for (i in 1 : 1000) {
y <- rnorm(n = 20, mean = 50, sd = 3)
x <- rnorm(n = 20, mean = 10, sd = 1)
nullModel <- lm(y~1)
reg <- lm(y~x)
getAIC <- AIC(nullModel, reg)
if (getAIC[1, 2] < getAIC[2, 2]) {
nullSum <- nullSum + 1
}
}
nullSumRate <- nullSum / simulations
nullSumRate
simulations <- 100
signifSum <- 0
par(mfrow = c(3, 3)) #set up a 3 * 3 grid.
for(i in 1 : simulations) {
y <- rnorm(n = 20, mean = 50, sd = 3)
x <- rnorm(n = 20, mean = 10, sd = 1)
reg <- lm(y~x)
pVal <- summary(reg)$coefficients[2,4]
if (pVal < 0.05) {
plot(x, y, pch = 16, col = "skyblue")
abline(reg, lty = 1, col = "skyblue4")
signifSum <- signifSum + 1
}
}
signifRate <- signifSum / simulations
signifRate
simulations <- 100
signifSum <- 0
par(mfrow = c(3, 3)) #set up a 3 * 3 grid.
for(i in 1 : simulations) {
y <- rnorm(n = 20, mean = 50, sd = 3)
x <- rnorm(n = 20, mean = 10, sd = 1)
reg <- lm(y~x)
pVal <- summary(reg)$coefficients[2,4]
if (pVal < 0.05) {
plot(x, y, pch = 16, col = "skyblue")
abline(reg, lty = 1, col = "skyblue4")
signifSum <- signifSum + 1
}
}
signifRate <- signifSum / simulations
signifRate
simulations <- 100
signifSum <- 0
par(mfrow = c(3, 3)) #set up a 3 * 3 grid.
for(i in 1 : simulations) {
y <- rnorm(n = 20, mean = 50, sd = 3)
x <- rnorm(n = 20, mean = 10, sd = 1)
reg <- lm(y~x)
pVal <- summary(reg)$coefficients[2,4]
if (pVal < 0.05) {
plot(x, y, pch = 16, col = "skyblue")
abline(reg, lty = 1, col = "skyblue4")
signifSum <- signifSum + 1
}
}
signifRate <- signifSum / simulations
signifRate
simulations <- 100
signifSum <- 0
par(mfrow = c(3, 3)) #set up a 3 * 3 grid.
for(i in 1 : simulations) {
y <- rnorm(n = 20, mean = 50, sd = 3)
x <- rnorm(n = 20, mean = 10, sd = 1)
reg <- lm(y~x)
pVal <- summary(reg)$coefficients[2,4]
if (pVal < 0.05) {
plot(x, y, pch = 16, col = "skyblue")
abline(reg, lty = 1, col = "skyblue4")
signifSum <- signifSum + 1
}
}
signifRate <- signifSum / simulations
signifRate
simulations <- 100
signifSum <- 0
par(mfrow = c(3, 3)) #set up a 3 * 3 grid.
for(i in 1 : simulations) {
y <- rnorm(n = 20, mean = 50, sd = 3)
x <- rnorm(n = 20, mean = 10, sd = 1)
reg <- lm(y~x)
pVal <- summary(reg)$coefficients[2,4]
if (pVal < 0.05) {
plot(x, y, pch = 16, col = "skyblue", main = "Regression Models of Random Samples (p-value < 0.05)")
abline(reg, lty = 1, col = "skyblue4")
signifSum <- signifSum + 1
}
}
signifRate <- signifSum / simulations
signifRate
simulations <- 100
signifSum <- 0
par(mfrow = c(3, 3)) #set up a 3 * 3 grid.
title(main = "Regression Models of Random Samples (p-value < 0.05)")
for(i in 1 : simulations) {
y <- rnorm(n = 20, mean = 50, sd = 3)
x <- rnorm(n = 20, mean = 10, sd = 1)
reg <- lm(y~x)
pVal <- summary(reg)$coefficients[2,4]
if (pVal < 0.05) {
plot(x, y, pch = 16, col = "skyblue")
abline(reg, lty = 1, col = "skyblue4")
signifSum <- signifSum + 1
}
}
signifRate <- signifSum / simulations
signifRate
title(main = "Regression Models of Random Samples (p-value < 0.05)")
for(i in 1 : simulations) {
y <- rnorm(n = 20, mean = 50, sd = 3)
x <- rnorm(n = 20, mean = 10, sd = 1)
reg <- lm(y~x)
pVal <- summary(reg)$coefficients[2,4]
if (pVal < 0.05) {
plot(x, y, pch = 16, col = "skyblue")
abline(reg, lty = 1, col = "skyblue4")
signifSum <- signifSum + 1
}
}
signifRate <- signifSum / simulations
signifRate
title(main = "Regression Models of Random Samples (p-value < 0.05)")
?par
text("Regression Models of Random Samples (p-value < 0.05)")
text(locator(1), "Regression Models of Random Samples (p-value < 0.05)")
for(i in 1 : simulations) {
y <- rnorm(n = 20, mean = 50, sd = 3)
x <- rnorm(n = 20, mean = 10, sd = 1)
reg <- lm(y~x)
pVal <- summary(reg)$coefficients[2,4]
if (pVal < 0.1) {
plot(x, y, pch = 16, col = "skyblue")
abline(reg, lty = 1, col = "skyblue4")
signifSum <- signifSum + 1
}
}
signifRate <- signifSum / simulations
signifRate
getwd()
setwd("E:/Desktop/STAT 498/Homework")
load("incomes.Rdat")
mean(incomesB)
hist(incomes)
?hist
hist(incomes, breaks = 20)
hist(incomes, breaks=20, col="skyblue3")
hist(incomes, breaks=20, col="skyblue2")
hist(incomes, breaks=20, col="skyblue1")
hist(incomes, breaks=20, col="skyblue4")
hist(incomes, breaks=20, col="skyblue5")
hist(incomes, breaks=20, col="skyblue3")
hist(incomes, breaks=20, col="skyblue")
mean(incomes)
sd(incomes)
hist(incomes, breaks=30, col="skyblue")
hist(incomes, breaks=40, col="skyblue")
hist(incomes, breaks=40, col="skyblue")
mean(incomes) ##74106.03
sd(incomes) ##94039.74
hist(incomes, breaks=100, col="skyblue")
80
hist(incomes, breaks=80, col="skyblue")
sum(incomes >= 60000)
median(incomes)
sum(incomes >= 600000)
?quantile
quantile(incomes)
quantile(incomes, prob=seq(0, 1, 0.1))
quantile(incomes)
topQuan <- quantile(incomes, prob=0.95)
totalSum <- sum(incomes)
topProp <- topSum / totalSum
topQuan <- quantile(incomes, prob=0.95)
topSum <- sum(incomes[incomes > topQuan])
totalSum <- sum(incomes)
topProp <- topSum / totalSum
topProp
topQuan <- quantile(incomes, prob=0.95)
topQuan
topSum
totalSum
sprintf("%1.4f%%", 100*topProp)
?numeric
sample <- sample(incomes, incomes.size, replace=T)
sample <- sample(incomes, length(incomes), replace=T)
sample <- sample(incomes, length(incomes), replace=T)
topQuan <- quantile(sample, prob=0.95)
topSum <- sum(sample[sample > topQuan])
sampleProp[i] <- topSum / sum(samples)
sampleProp[i] <- topSum / sum(sample)
sampleProp <- numeric(simulations)
simulations <- 10000
sampleProp <- numeric(simulations)
sampleProp[i] <- topSum / sum(sample)
sampleProp[1]
sample <- sample(incomes, length(incomes), replace=T)
topQuan <- quantile(sample, prob=0.95)
topSum <- sum(sample[sample > topQuan])
sampleProp[i] <- topSum / sum(sample)
sampleProp[1]
sample <- sample(incomes, length(incomes), replace=T)
topQuan <- quantile(sample, prob=0.95)
topSum <- sum(sample[sample > topQuan])
sampleProp[1] <- topSum / sum(sample)
sampleProp[1]
kSmulations <- 10000
sampleProp <- numeric(kSimulations)
for (i in 1 : kSimulations) {
sample <- sample(incomes, length(incomes), replace=T)
topQuan <- quantile(sample, prob=0.95)
topSum <- sum(sample[sample > topQuan])
sampleProp[i] <- topSum / sum(sample)
}
CI.value <- quantile(sampleProp, prop=c(0.025, 0.975))
hist(sampleProp, breaks = 30, col="skyblue")
abline(v=CI.value, col="khaki1")
kSimulation <- 10000
sampleProp <- numeric(kSimulation)
for (i in 1 : kSimulation) {
sample <- sample(incomes, length(incomes), replace=T)
topQuan <- quantile(sample, prob=0.95)
topSum <- sum(sample[sample > topQuan])
sampleProp[i] <- topSum / sum(sample)
}
CI.value <- quantile(sampleProp, prop=c(0.025, 0.975))
hist(sampleProp, breaks = 30, col="skyblue")
abline(v=CI.value, col="khaki1")
abline(v=CI.value, col="orangered")
abline(v = CI.value, lwd = 2, col = "orangered")
kSimulation <- 10000
sampleProp <- numeric(kSimulation)
for (i in 1 : kSimulation) {
sample <- sample(incomes, length(incomes), replace=T)
topQuan <- quantile(sample, prob=0.95)
topSum <- sum(sample[sample > topQuan])
sampleProp[i] <- topSum / sum(sample)
}
CI.value <- quantile(sampleProp, prob = c(0.025, 0.975))
hist(sampleProp, breaks = 30, col = "skyblue", main = "Histogram of Top 5% Earners' Incomes Among Total Incomes")
abline(v = CI.value, lwd = 2, col = "orangered")
kSimulation <- 10000
sampleProp <- numeric(kSimulation)
for (i in 1 : kSimulation) {
sample <- sample(incomes, length(incomes), replace=T)
topQuan <- quantile(sample, prob=0.95)
topSum <- sum(sample[sample > topQuan])
sampleProp[i] <- topSum / sum(sample)
}
CI.value <- quantile(sampleProp, prob = c(0.025, 0.975))
hist(sampleProp, breaks = 40, col = "skyblue", main = "Histogram of Top 5% Earners' Incomes Among Total Incomes")
abline(v = CI.value, lwd = 2, col = "orangered")
kSimulation <- 10000
sampleProp <- numeric(kSimulation)
for (i in 1 : kSimulation) {
sample <- sample(incomes, length(incomes), replace=T)
topQuan <- quantile(sample, prob=0.95)
topSum <- sum(sample[sample > topQuan])
sampleProp[i] <- topSum / sum(sample)
}
CI.value <- quantile(sampleProp, prob = c(0.025, 0.975))
hist(sampleProp, breaks = 100, col = "skyblue", main = "Histogram of Top 5% Earners' Incomes Among Total Incomes")
abline(v = CI.value, lwd = 2, col = "orangered")
kSimulation <- 10000
sampleProp <- numeric(kSimulation)
for (i in 1 : kSimulation) {
sample <- sample(incomes, length(incomes), replace=T)
topQuan <- quantile(sample, prob=0.95)
topSum <- sum(sample[sample > topQuan])
sampleProp[i] <- topSum / sum(sample)
}
CI.value <- quantile(sampleProp, prob = c(0.025, 0.975))
hist(sampleProp, breaks = 40, col = "skyblue", main = "Histogram of Top 5% Earners' Incomes Among Total Incomes")
abline(v = CI.value, lwd = 2, col = "orangered")
kSimulation <- 10000
sampleProp <- numeric(kSimulation)
for (i in 1 : kSimulation) {
sample <- sample(incomes, length(incomes), replace=T)
topQuan <- quantile(sample, prob=0.95)
topSum <- sum(sample[sample > topQuan])
sampleProp[i] <- topSum / sum(sample)
}
CI.value <- quantile(sampleProp, prob = c(0.025, 0.975))
hist(sampleProp, breaks = 50, col = "skyblue", main = "Histogram of Top 5% Earners' Incomes Among Total Incomes")
abline(v = CI.value, lwd = 2, col = "orangered")
kSimulation <- 10000
sampleProp <- numeric(kSimulation)
for (i in 1 : kSimulation) {
sample <- sample(incomes, length(incomes), replace=T)
topQuan <- quantile(sample, prob=0.95)
topSum <- sum(sample[sample > topQuan])
sampleProp[i] <- topSum / sum(sample)
}
CI.value <- quantile(sampleProp, prob = c(0.025, 0.975))
hist(sampleProp, breaks = 30, col = "skyblue", main = "Histogram of Top 5% Earners' Incomes Among Total Incomes")
abline(v = CI.value, lwd = 2, col = "orangered")
bSampleProp <- numeric(kSimulation)
for (i in 1 : kSimulation) {
sample <- sample(incomesB, length(incomesB), replace=T)
topQuan <- quantile(sample, prob=0.95)
topSum <- sum(sample[sample > topQuan])
bSampleProp[i] <- topSum / sum(sample)
}
b.CI.value <- quantile(bSampleProp, prob = c(0.025, 0.975))
prop.Diff <- numeric(kSimulation)
for (i in 1 : kSimulation) {
prop.Diff[i] <- aSampleProp - bSampleProp
}
diff.CI <- quantile(prop.Diff, prob = c(0.025, 0.975))
aSampleProp <- numeric(kSimulation)
for (i in 1 : kSimulation) {
sample <- sample(incomes, length(incomes), replace=T)
topQuan <- quantile(sample, prob=0.95)
topSum <- sum(sample[sample > topQuan])
aSampleProp[i] <- topSum / sum(sample)
}
CI.value <- quantile(aSampleProp, prob = c(0.025, 0.975))
prop.Diff <- numeric(kSimulation)
for (i in 1 : kSimulation) {
prop.Diff[i] <- aSampleProp - bSampleProp
}
diff.CI <- quantile(prop.Diff, prob = c(0.025, 0.975))
warnings()
prop.Diff <- numeric(kSimulation)
for (i in 1 : kSimulation) {
prop.Diff[i] <- aSampleProp - bSampleProp
}
#Calculate
diff.CI <- quantile(prop.Diff, prob = c(0.025, 0.975))
diff.CI
hist(bSampleProp)
prop.Diff <- numeric(kSimulation)
for (i in 1 : kSimulation) {
prop.Diff[i] <- aSampleProp[i] - bSampleProp[i]
}
diff.CI <- quantile(prop.Diff, prob = c(0.025, 0.975))
diff.CI
prop.Diff[i] <- bSampleProp[i]-aSampleProp[i]
for (i in 1 : kSimulation) {
prop.Diff[i] <- bSampleProp[i]-aSampleProp[i]
}
diff.CI <- quantile(prop.Diff, prob = c(0.025, 0.975))
diff.CI
bTopQuan <- quantile(incomesB, prob=0.95)
bTopSum <- sum(incomesB[incomesB > BtopQuan])
bTotalSum <- sum(incomesB)
bTopProp <- bTopSum / bTotalSum
topProp - bTopProp >= diff.CI[1] $ topProp - bTopProp <= diff.CI[2]
bTopQuan <- quantile(incomesB, prob=0.95)
bTopSum <- sum(incomesB[incomesB > btopQuan])
bTotalSum <- sum(incomesB)
bTopProp <- bTopSum / bTotalSum
bTopQuan <- quantile(incomesB, prob=0.95)
bTopSum <- sum(incomesB[incomesB > bTopQuan])
bTotalSum <- sum(incomesB)
bTopProp <- bTopSum / bTotalSum
topProp - bTopProp > diff.CI[1] $ topProp - bTopProp < diff.CI[2]
1>2
(topProp - bTopProp) > diff.CI[1] $ (topProp - bTopProp) < diff.CI[2]
1 > 2 $ 2 <3
return(1 >2)
((topProp - bTopProp) > diff.CI[1]) $ ((topProp - bTopProp) < diff.CI[2])
((topProp - bTopProp) > diff.CI[1]) && ((topProp - bTopProp) < diff.CI[2])
topProp - bTopProp
prop.Diff <- numeric(kSimulation)
for (i in 1 : kSimulation) {
prop.Diff[i] <- aSampleProp[i] - bSampleProp[i]
}
diff.CI <- quantile(prop.Diff, prob = c(0.025, 0.975))
#Calculate proportion of top 5% earner's income among total income.
bTopQuan <- quantile(incomesB, prob=0.95)
bTopSum <- sum(incomesB[incomesB > bTopQuan])
bTotalSum <- sum(incomesB)
bTopProp <- bTopSum / bTotalSum
((topProp - bTopProp) > diff.CI[1]) && ((topProp - bTopProp) < diff.CI[2])
gini(incomes)
diff.gini <- numeric(kSimulation)
for(i in 1 : kSimulation) {
aSample <- sample(incomes, length(incomes), replace=T)
bSample <- sample(incomesB, length(incomesB), replace=T)
diff.gini[i] <- gini(aSample) - gini(bSample)
}
diff.gini.CI <- quantile(diff.gini, prob = c(0.05, 0.95))
diff.gini.CI
b.CI.value <- quantile(bSampleProp, prob = c(0.025, 0.975))
b.CI.value
CI.value
diff.CI
bTopProp
diff.gini.CI <- quantile(diff.gini, prob = c(0.05, 0.95))
diff.gini.CI
kSimulation <- 10000
aSampleProp <- numeric(kSimulation)
for (i in 1 : kSimulation) {
sample <- sample(incomes, length(incomes), replace=T)
topQuan <- quantile(sample, prob=0.95)
topSum <- sum(sample[sample > topQuan])
aSampleProp[i] <- topSum / sum(sample)
}
CI.value <- quantile(aSampleProp, prob = c(0.025, 0.975)) ##0.2197676 ~ 0.2834287
hist(aSampleProp, breaks = 30, col = "skyblue", main = "Histogram of Top 5% Earners' Incomes Among Total Incomes")
abline(v = CI.value, lwd = 2, col = "orangered")
